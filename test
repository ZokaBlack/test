// This program uses a selection sort to arrange an array of integers in
// ascending order

// Austin Lauritzen
// LMD 5/5/2021 21SPR-CSC-5-43410


#include <iostream>
using namespace std;

// function prototypes
void selectionSortArray(int[], int);
void displayArray(int[], int);
int searchList(int[], int, int);

int main()
{
    int SIZE;
    int index;
	int values[SIZE];
	int choice;
	int found;
	
	cout << "How many numbers would you like to input?" << endl;
	cin >> SIZE;
	
        for(int i = 0; i < SIZE; i++)
        {
	    cin >> values[i];
        }
	    

	cout << "The values before the selection sort is performed are:" << endl;
	displayArray(values, SIZE);

	selectionSortArray(values, SIZE);

	cout << "\n\nThe values after the selection sort is performed are:" << endl;
	displayArray(values, SIZE);
	
	cout << "enter a number to search for:" << endl;
	cin >> choice;
	
	found = searchList(values, SIZE, choice); 
    
    if(found==-1)
    {
        cout << "The number" << choice << "was not found in the list." << endl;
    }
    else
    {
        cout << " The number" << choice << "is in the" << found + 1 << "position of the list" << endl;
    }
	return 0;
}

//******************************************************************
//	displayArray
//
//  task:	  to print the array
//  data in:  the array to be printed, the array size
//  data out: none
//
//******************************************************************

void displayArray(int array[], int elems)	// function heading
{		
	// Displays array 
	for (int count = 0; count < elems; count++)
		cout << array[count] << " ";
	cout << endl;
}

//******************************************************************
//	selectionSortArray
//
//  task:	  to sort values of an array in ascending order
//  data in:  the array, the array size
//  data out: the sorted array
//
//******************************************************************

void selectionSortArray(int array[], int elems)
{
	int seek;		// array position currently being put in order 
	int minCount;	// location of smallest value found
	int minValue;	// holds the smallest value found

	for (seek = 0; seek < (elems - 1); seek++)	// outer loop performs the swap
												// and then increments seek
	{
		minCount = seek;
		minValue = array[seek];

		for (int index = seek + 1; index < elems; index++)
		{
		    
			// inner loop searches through array
			// starting at array[seek] searching
			// for the smallest value. When the
			// value is found, the subscript is
			// stored in minCount. The value is
			// stored in minValue.
             
			if (array[index] < minValue)
			{
				minValue = array[index];
				minCount = index;
				
				
			}
			
		}
        
		// the following two statements exchange the value of the
		// element currently needing the smallest value found in the
		// pass(indicated by seek) with the smallest value found
		// (located in minValue)

		array[minCount] = array[seek];
		array[seek] = minValue;
		
		for (int i = 0; i <= elems - 1; i++) 
		{
		if (i % 8==0)
		{
		    cout << endl;
		}
        cout << array[i] << " ";
		}
		
	}
}	
//*******************************************************************
//	searchList
//
//  task:	       This searches an array for a particular value
//  data in:	   List of values in an array, the number of
//	               elements in the array, and the value searched for
//	               in the array
//  data returned: Position in the array of the value or -1 if value
//	               not found
//
//*******************************************************************

int searchList(int array[], int elems, int value)
{
	for (int c = 0; c <= elems; c++)
	{
		if (array[c] == value)
			// each array entry is checked to see if it contains
			// the desired value. 
			
			return c;
			// if the desired value is found, the array subscript
			// count is returned to indicate the location in the array
	}

	return -1;	// if the value is not found, -1 is returned

	
}
